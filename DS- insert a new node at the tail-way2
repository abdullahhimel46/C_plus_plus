// insert a new node at the tail- WAY2
#include <bits/stdc++.h>
using namespace std;

// Node class to represent each node in the linked list
class Node
{
public:
    int data;
    Node *next;

    // Constructor to initialize a node with given data
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};

// Function to insert a new node at the tail of the linked list
void insertAtTail(Node *&head, Node *&tail, int val)
{
    Node *newNode = new Node(val); // Create a new node with the given value

    if (head == NULL) // Check if the linked list is empty
    {
        head = newNode; // If empty, set both head and tail to the new node
        tail = newNode;
        return; // Exit the function as the operation is completed
    }
    else{
    tail->next = newNode; // Make the current tail node point to the new node
    tail = newNode;       // Update the tail to be the newly added node
    }
}

// Function to display the elements of the linked list
void display_list(Node *head)
{
    Node *tmp = head;
    while (tmp != NULL)
    // Traverse until reaching the end of the list
    {
        cout << tmp->data << "->"; // Print the data of the current node
        tmp = tmp->next;           // Move to the next node
    }
    cout << "NULL" << endl;
}

int main()
{
    // Initialize an empty linked list
    Node *head = NULL;
    Node *tail = NULL;

    // Insert elements at the tail of the linked list
    insertAtTail(head, tail, 1);
    insertAtTail(head, tail, 2);
    insertAtTail(head, tail, 3);

    // Display the elements of the linked list
    cout << "Linked list: ";
    display_list(head);

    return 0;
}
