// Level Order Reverse Traversal
#include <bits/stdc++.h>
using namespace std;
/*
Sample Input 1:
1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1
Sample Output 1:
7 6 5 4 3 2 1
*/

/*
Technique:
1.push_back the elements of the queue in a vector
2.reverse the vector and print it.
*/
class Node
{
public:
    int val;
    Node *left = NULL;
    Node *right = NULL;
    Node(int val)
    {
        this->val = val;
    }
};

Node *inputTree()
{
    int val;
    cin >> val;
    Node *root;
    if (val == -1)
        return NULL;
    else
        root = new Node(val);
    // queue will perform level order traversal
    queue<Node *> q;
    if (root)
        q.push(root);

    while (!q.empty())
    {
        // 1.ber kore ano
        Node *p = q.front();
        q.pop();

        // 2.kaj sharo
        int l, r;
        cin >> l >> r;

        if (l != -1)
        {
            p->left = new Node(l);
        }
        if (r != -1)
        {
            p->right = new Node(r);
        }

        // 3.child ke q te push koro
        if (p->left)
            q.push(p->left);
        if (p->right)
            q.push(p->right);
    }
    return root;
}

void reverseLevelOrder(Node *root)
{
    if (root == NULL)
    {
        cout << "Empty" << endl;
        return;
    }

    vector<int> v;
    queue<Node *> q;
    if (root)
        q.push(root);

    while (!q.empty())
    {
        // 1.ber kore ano
        Node *node = q.front();
        q.pop();

        // 2.kaj sharo
        v.push_back(node->val);

        // 3.child ke q te push koro
        if (node->left)
            q.push(node->left);
        if (node->right)
            q.push(node->right);
    }

    // now reverse the vector
    reverse(v.begin(), v.end());

    for (int x : v)
    {
        cout << x << " ";
    }
}

int main()
{
    Node *root = inputTree();
    reverseLevelOrder(root);

    return 0;
}
