// Binary tree implementation. Depth & level order traversal
#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int val;
    Node *left = NULL;
    Node *right = NULL;
    Node(int val)
    {
        this->val = val;
    }
};

// Pre Order Traversal
void preOrder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }

    // recursive case
    // preOrder: root->left->right
    cout << root->val << " ";
    preOrder(root->left);
    preOrder(root->right);
}

// Post Order Traversal
void postOrder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }

    // recursive case
    // postOrder: left->right->root
    postOrder(root->left);
    postOrder(root->right);
    cout << root->val << " ";
}

// In Order Traversal
void inOrder(Node *root)
{
    // base case
    if (root == NULL)
    {
        return;
    }

    // recursive case
    // inOrder: left->root->right
    inOrder(root->left);
    cout << root->val << " ";
    inOrder(root->right);
}

/*
Level Order Traversal technique:
1. push the root node in a queue.
2. while(!q.empty())->
    a.stroe the front node
    b.pop that node
    c.print front node's data
    d.push the childs in the queue
*/

// Level Order Traversal(Left to Right)
void levelOrderLR(Node *root)
{

    if (root == NULL)
    {
        cout << "Empty!" << endl;
        return;
    }
    queue<Node *> q;
    // Initially, q is empty.So push root
    q.push(root);

    while (!q.empty())
    {
        // 1.ber kore ana
        Node *f = q.front();
        q.pop();

        // 2.print kora
        cout << f->val << " ";

        // 3.child gulo queue te rakha
        if (f->left)
            // means, if f->left != NULL
            q.push(f->left);
        if (f->right)
            // means, if f->right != NULL
            q.push(f->right);
    }
}

// Level Order Traversal(Right to Left)
void levelOrderRL(Node *root)
{
    if (root == NULL)
    {
        cout << "Empty!" << endl;
        return;
    }
    queue<Node *> q;
    // Initially, q is empty.
    q.push(root);

    while (!q.empty())
    { // 1. ber kore ana
        Node *f = q.front();
        q.pop();

        // 2. print kora
        cout << f->val << " ";

        // 3. child gulo queue te rakha
        if (f->right)
            q.push(f->right);
        if (f->left)
            q.push(f->left);
    }
}

int main()
{
    Node *root = new Node(10);
    Node *a = new Node(20);
    Node *b = new Node(30);
    Node *c = new Node(40);
    Node *d = new Node(50);
    Node *e = new Node(60);
    Node *f = new Node(70);
    Node *g = new Node(80);
    Node *h = new Node(90);
    Node *i = new Node(100);

    // connection
    root->left = a;
    root->right = b;
    a->left = c;
    a->right = h;
    c->right = e;
    b->right = d;
    d->left = f;
    d->right = g;
    h->right = i;

    cout << "Depth Order->" << endl;

    cout << "PreOrder : ";
    preOrder(root);

    cout << endl;
    cout << "PostOrder: ";
    postOrder(root);

    cout << endl;
    cout << "InOrder  : ";
    inOrder(root);

    cout << endl;
    cout << "Level Order->" << endl;

    cout << "Left to right: ";
    levelOrderLR(root);

    cout << endl;
    cout << "Right to Left: ";
    levelOrderRL(root);

    return 0;
}
