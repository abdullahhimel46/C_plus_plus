// Count Number of Nodes in a Binary Tree
/*
Input: 10 20 60 30 50 70 -1 -1 40 -1 -1 -1 -1 80 -1 -1
OUtput: 8
*/
#include <bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *left = NULL;
    Node *right = NULL;
    Node(int val)
    {
        this->val = val;
    }
};

Node *inputTree()
{
    int val;
    cin >> val;
    Node *root;
    if (val == -1)
    {
        return NULL;
    }
    else
    {
        root = new Node(val);
    }
    queue<Node *> q;
    if (root)
        q.push(root);

    while (!q.empty())
    {
        // 1.ber kore ano
        Node *p = q.front();
        q.pop();

        // 2.kaj sharo
        int l, r;
        cin >> l >> r;

        if (l != -1)
        {
            p->left = new Node(l);
        }
        if (r != -1)
        {
            p->right = new Node(r);
        }
        // 3.child ke push koro
        if (p->left)
            q.push(p->left);
        if (p->right)
            q.push(p->right);
    }

    return root;
}

int cnt(Node *root)
{
    // base case
    if (root == NULL)
        return 0;

    // recursive case
    int l = cnt(root->left);
    int r = cnt(root->right);

    return l + r + 1;
    // total node = leftNode+rightNode+rootNode;
}

int main()
{
    Node *root = inputTree();
    cout << cnt(root);
    return 0;
}
