// Diameter Of a Binary Tree
/*
Sample Input 1 :
1 2 3 4 7 -1 -1 -1 -1 -1 -1

Sample Output 1 :
3

*The diameter of a binary tree is the length of the longest path between
any two end/leaf nodes in a tree.

*The number of edges between two nodes represents the length of the path
between them.
*/

#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int val;
    Node *left = NULL;
    Node *right = NULL;
    Node(int val)
    {
        this->val = val;
    }
};

int mx = 0;

int maxHeight(Node *root)
{
    if (root == NULL)
        return 0;

    int l = maxHeight(root->left);
    int r = maxHeight(root->right);

    int d = l + r;

    // update 'mx' variable
    mx = max(mx, d);

    return max(l, r) + 1;
}

int diameterOfTree(Node *root)
{
    int height = maxHeight(root);
    return mx;
}

Node *inputTree()
{
    int val;
    cin >> val;
    Node *root;
    if (val == -1)
    {
        return NULL;
    }
    else
    {
        root = new Node(val);
    }

    queue<Node *> q;
    if (root)
        q.push(root);

    while (!q.empty())
    {
        // 1.ber kore ano
        Node *p = q.front();
        q.pop();

        // 2.kaj sharo
        int l, r;
        cin >> l >> r;

        if (l != -1)
        {
            p->left = new Node(l);
        }
        if (r != -1)
        {
            p->right = new Node(r);
        }

        // 3.child ke q te push koro
        if (p->left)
            q.push(p->left);
        if (p->right)
            q.push(p->right);
    }

    return root;
}

int main()
{
    Node *root = inputTree();
    int d = diameterOfTree(root);
    cout << d << endl;

    return 0;
}
