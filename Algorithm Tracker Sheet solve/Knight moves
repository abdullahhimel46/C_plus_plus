// Knight moves
/*
Input:
e2 e4
a1 b2
b2 c3
a1 h8
a1 h7
h8 a1
b1 c3
f6 f6
Output:
To get from e2 to e4 takes 2 knight moves.
To get from a1 to b2 takes 4 knight moves.
To get from b2 to c3 takes 2 knight moves.
To get from a1 to h8 takes 6 knight moves.
To get from a1 to h7 takes 5 knight moves.
To get from h8 to a1 takes 6 knight moves.
To get from b1 to c3 takes 1 knight moves.
To get from f6 to f6 takes 0 knight moves.
*/
#include <bits/stdc++.h>
using namespace std;

const int N = 8;
int n = N, m = N; // Assuming standard chessboard size
bool vis[N][N];
int dis[N][N];
vector<pair<int, int>> dir = {{1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};

bool isValid(int i, int j)
{
    return i >= 0 && i < n && j >= 0 && j < m;
}

void bfs(int r1, int c1, int r2, int c2)
{
    queue<pair<int, int>> q;
    q.push({r1, c1});
    vis[r1][c1] = true;
    dis[r1][c1] = 0;

    while (!q.empty())
    {
        pair<int, int> node = q.front();
        q.pop();
        int row = node.first, col = node.second;

        for (pair<int, int> d : dir)
        {
            // move to row2 & col2
            r2 = node.first + d.first;
            c2 = node.second + d.second;
            if (isValid(r2, c2) && !vis[r2][c2])
            {
                q.push({r2, c2});
                vis[r2][c2] = true;
                dis[r2][c2] = dis[row][col] + 1;
            }
        }
    }
}

int main()
{
    string s1, s2;
    while (cin >> s1 >> s2)
    {
        int row1 = s1[0] - 'a';
        int col1 = s1[1] - '1';
        int row2 = s2[0] - 'a';
        int col2 = s2[1] - '1';
        /*
        For example, given the input pair e2 e4, s1 would be "e2" and s2 would
        be "e4". After the conversion:
        si would be 2 - 1 = 1.
        sj would be 'e' - 'a' = 5 - 1 = 4.
        di would be 4 - 1 = 3.
        dj would be 'e' - 'a' = 5 - 1 = 4
        */

        memset(vis, false, sizeof(vis));
        memset(dis, -1, sizeof(dis));

        bfs(row1, col1, row2, col2);

        cout << "To get from " << s1 << " to " << s2 << " takes " << dis[row2][col2] << " knight moves." << endl;
    }
    return 0;
}
