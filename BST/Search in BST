// Search in BST
/*
Input:
10 5 15 2 6 12 16 -1 3 -1 -1 -1 -1 -1 -1 -1 -1
9 -> searchValue
Output:
Not found
*/

/*
Defination of BST: A Binary Search Tree (BST) is a binary tree in which
the left subtree of a node contains only nodes with values less than the node,
and the right subtree contains only nodes with values greater than the node.
*/
#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int val;
    Node *left = NULL;
    Node *right = NULL;
    Node(int val)
    {
        this->val = val;
    }
};


Node *inputTree()
{
    int val;
    cin >> val;
    Node *root;
    if (val == -1)
    {
        return NULL;
    }
    else
    {
        root = new Node(val);
    }

    queue<Node *> q;
    if (root)
        q.push(root);

    while (!q.empty())
    {
        // 1.ber kore ano
        Node *p = q.front();
        q.pop();

        // 2.kaj sharo
        int l, r;
        cin >> l >> r;

        if (l != -1)
            p->left = new Node(l);
        if (r != -1)
            p->right = new Node(r);

        // 3.child ke q te push koro
        if (p->left)
            q.push(p->left);
        if (p->right)
            q.push(p->right);
    }

    return root;
}

bool search(Node *root, int x)
{
    // base case
    if (root == NULL)
        return false;

    // if x is found in the root
    if (root->val == x)
        return true;

    //
    if (x < root->val)
        // traverse the left subtree
        return search(root->left, x);
    else
        // traverse the right subtree
        return search(root->right, x);
}

int main()
{
    Node *root = inputTree();
    int searchValue;
    cin >> searchValue;
    bool s = search(root, searchValue);
    if (s)
        cout << "found" << endl;
    else
        cout << "Not found" << endl;

    return 0;
}
