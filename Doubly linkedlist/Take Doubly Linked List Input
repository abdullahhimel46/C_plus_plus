// Take Doubly Linked List Input
#include <bits/stdc++.h>
using namespace std;

class Node
{ // Definition of Node class
public:
    int data;   // Data stored in the node
    Node *next; // Pointer to the next node in the linked list
    Node *prev; // Pointer to the previous node in the linked list

    // Constructor to initialize a Node with given data
    Node(int data)
    {
        this->data = data; // Assigning the input data to the node's data attribute
        this->next = NULL; // Initializing the next pointer as NULL (no node initially connected)
        this->prev = NULL; // Initializing the previous pointer as NULL (no node initially connected)
    }
};

void printNormal(Node *head)
{                     // Function to print the linked list in forward order
    Node *tmp = head; // Creating a temporary pointer initialized to the head of the linked list
    while (tmp != NULL)
    {                             // Looping through the linked list until reaching the end (NULL)
        cout << tmp->data << " "; // Printing the data in the current node
        tmp = tmp->next;          // Moving the temporary pointer to the next node in the list
    }
    cout << endl; // Printing a newline after printing the entire list in forward order
}

void printRev(Node *tail)
{                     // Function to print the linked list in reverse order
    Node *tmp = tail; // Creating a temporary pointer initialized to the tail of the linked list
    while (tmp != NULL)
    {                             // Looping through the linked list until reaching the start (NULL)
        cout << tmp->data << " "; // Printing the data in the current node
        tmp = tmp->prev;          // Moving the temporary pointer to the previous node in the list
    }
    cout << endl; // Printing a newline after printing the entire list in reverse order
}

void insertAtTail(Node *&head, Node *&tail, int val)
{
    Node *newNode = new Node(val);
    if (tail == NULL)
    {
        head = newNode;
        tail = newNode;
        return;
    }

    tail->next = newNode;
    newNode->prev = tail;
    tail = newNode;
}

int main()
{
    // Creating nodes and establishing connections between them
    Node *head = NULL;
    Node *tail = NULL; // Tail pointer initialized to the last node 'c'

    int val;
    cout << "Enter value: ";
    while (cin >> val && val != -1)
    {
        insertAtTail(head, tail, val);
    }
    printNormal(head); // Printing the modified list in forward order
    printRev(tail);    // Printing the modified list in reverse order

    return 0;
}
