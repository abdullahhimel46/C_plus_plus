// Stack Implementation using singly linkedList
#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int data;
    Node *next = NULL;

    // Constructor to initialize a node with given data
    Node(int data)
    {
        this->data = data;
    }
};

// push means inserting a new node in the head of the list
void push(Node *&head, int val)
{
    Node *newNode = new Node(val);
    newNode->next = head; // point newNode to top
    head = newNode;       // update top
}

void pop(Node *&head)
{
    // corner case
    if (head == NULL)
    {
        return;
    }

    // pop means removing a node from the head of the list
    Node *delNode = head;
    head = delNode->next;
    delete delNode;
}

int top(Node *head)
// top will just return the head data unless the stack is empty
{
    if (head == NULL)
    {
        return -1; // Stack is empty
    }
    return head->data;
}

int sizeOfStack(Node *head)
{
    int cnt = 0;
    // traverse the linked list and count the number of nodes
    for (Node *tmp = head; tmp != NULL; tmp = tmp->next)
    {
        cnt++;
    }
    return cnt;
}

bool empty(Node *head)
{
    if (sizeOfStack(head) == 0)
        return true;
    else
        return false;
}

void displayStack(Node *head)
{
    if (head == NULL)
    {
        cout << "Stack is empty." << endl;
        return;
    }

    cout << "Stack elements:" << endl;

    // traverse the linkedList and print the data of each node
    for (Node *tmp = head; tmp != NULL; tmp = tmp->next)
    {
        {
            cout << tmp->data << " ";
        }
        cout << endl;
    }
}

int main()
{
    Node *head = NULL;
    push(head, 10);
    push(head, 20);
    push(head, 30);

    // printing the size of the stack
    cout << "Size: " << sizeOfStack(head) << endl;

    // printing the elements of the stack, way-1
    displayStack(head);
    cout << endl;

    // printing the elements of the stack, way-2
    cout << "Elements of the stack:" << endl;
    while (!empty(head))
    {
        cout << top(head) << endl;
        pop(head);
    }

    return 0;
}
