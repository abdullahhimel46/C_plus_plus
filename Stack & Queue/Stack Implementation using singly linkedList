// Stack Implementation using singly linkedList
#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int data;
    Node *next = NULL;

    // Constructor to initialize a node with given data
    Node(int data)
    {
        this->data = data;
    }
};

class myStack
{
public:
    Node *head = NULL;
    Node *tail = NULL;
    int sz = 0;

    void push(int val)
    {
        sz++;
        Node *n = new Node(val);
        if (head == NULL)
        {
            head = n;
            tail = n;
            return;
        }
        n->next = head;
        head = n;
    }

    void pop()
    {
        Node *delNoode = head;
        head = delNoode->next;
        delete delNoode;

        if (head == NULL)
        {
            tail = NULL;
        }
        sz--;
    }

    int top()
    {
        return head->data;
    }

    bool empty()
    {
        return sz == 0;
    }
};

int main()
{
    myStack st;
    st.push(10);
    st.push(20);
    st.push(30);
    st.push(40);

    // printing the size of the stack
    cout << "Size: " << st.sz << endl;

    // printing the elements of the stack, way-2
    cout << "Elements of the stack:" << endl;
    while (!st.empty())
    {
        cout << st.top() << endl;
        st.pop();
    }

    return 0;
}
