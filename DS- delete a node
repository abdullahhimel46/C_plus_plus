// delation of a node from the list
#include <bits/stdc++.h>
using namespace std;

// Node class to represent each node in the linked list
class Node
{
public:
    int data;
    Node *next;

    // Constructor to initialize a node with given data
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};

// Function to insert a new node at the tail of the linked list
void insertAtTail(Node *&head, int val)
//&head-> '&' denotes that head is a reference to a pointer
{
    // creating a new node
    Node *newNode = new Node(val);

    ////condition for head(list is empty)
    // If the list is empty(means head == NULL ), make the new node the head
    if (head == NULL)
    {
        head = newNode; // the newNode is head,now
        return;         // Return if user inserts a single value
    }

    ////condition for tail(list isn't empty)

    // Traverse to the end of the list to insert the new node at the tail
    Node *tmp = head;
    while (tmp->next != NULL)
    // Traverse until finding tail(the node having NULL in it's next)
    {
        tmp = tmp->next; // Move to the next node
        // now tmp is on the last node
    }
    // Connect the last node to the new node
    tmp->next = newNode; // changing newNode's address
}

// Function to delete a node from a specified position in the linked list
void delete_from_position(Node *&head, int pos)
{

    Node *tmp = head; // Create a temporary pointer to traverse the linked list
    if (pos == 0)
    {
        // Node *tmp = head;
        head = head->next;
        delete tmp; // Delete the node
        return;
    }

    // Traverse the list to reach the node just before the position to be deleted
    for (int i = 0; i < pos - 1; i++)
    {
        tmp = tmp->next; // Move the pointer to the node before the specified position
    }

    Node *deleteNode = tmp->next; // Store the node to be deleted
    tmp->next = tmp->next->next;  // connect the previous node directly to the next node.

    delete deleteNode; // Delete the node from memory to prevent memory leaks
}

// Function to display the elements of the linked list
void display_list(Node *head)
{
    Node *tmp = head;

    while (tmp != NULL)
    // Traverse until reaching the end of the list
    {
        cout << tmp->data << " "; // Print the data of the current node
        tmp = tmp->next;          // Move to the next node
    }
}

int main()
{
    Node *head = NULL; // Initialize an empty linked list

    // Insert elements at the tail of the linked list
    insertAtTail(head, 1);
    insertAtTail(head, 2);
    insertAtTail(head, 3);
    insertAtTail(head, 4);

    // Display the elements of the linked list

    cout << "Linked list: ";
    display_list(head);
    cout << endl;

    delete_from_position(head, 0);
    cout << "Linked list after delation: ";
    display_list(head);

    return 0;
}
