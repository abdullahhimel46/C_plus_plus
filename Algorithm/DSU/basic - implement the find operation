#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
vector<int> par(N);

void parent_init(int n)
{
    // set each node as it's own leader
    for (int i = 0; i < n; i++)
    {
        par[i] = -1;
        // par[i] = i;
    }
    /*  // output after for loop
    par: -1 -1 -1 -1
    node: 0  1  2  3
    */
    // manually set parents
    par[1] = 3;
    par[2] = 1;

    /*  // now
    par: -1  3  1 -1
    node: 0  1  2  3
    */
}

void display(int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << par[i] << " ";
    }
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << " ";
    }
    cout << endl;
}

int dsu_find(int node)
{
    // Base case: If the current node is a root node (its parent is -1)
    if (par[node] == -1)
    // if (par[node] == node)
        return node; // Return the node itself.

    // Recursive call: Find the leader of the current node.
    int leader = dsu_find(par[node]);
    // Path compression: directly connect the current node to its leader
    par[node] = leader; // update leader
    return leader;
    // N.B: for clearing confusion, watch the find operation animation
}

int main()
{
    parent_init(4);

    cout << "Leader of 0 is - " << dsu_find(0) << endl;
    cout << "Leader of 1 is - " << dsu_find(1) << endl;
    cout << "Leader of 2 is - " << dsu_find(2) << endl;
    cout << "Leader of 3 is - " << dsu_find(3) << endl;
    display(4);
}
