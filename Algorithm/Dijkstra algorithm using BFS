//Dijkstra algorithm using BFS
/*
Input:
5 8
0 1 10
0 2 7
0 3 4
1 4 3
2 4 5
2 1 1
3 4 5
3 2 1
Output:
0-> 0
1-> 6
2-> 5
3-> 4
4-> 9
*/
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
vector<pair<int, int>> adj[N];
int dist[N];

/*
class cmp
{
public:
    bool operator()(pair<int, int> a, pair<int, int> b)
    {
        return a.second > b.second; // sort on the basis of second value
    }
};
*/

void dijkstra(int src)
{
    // priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    pq.push({src, 0});
    dist[src] = 0;

    while (!pq.empty())
    {
        auto parent = pq.top();
        pq.pop();
        int node = parent.first;
        int parCost = parent.second;

        for (auto child : adj[node])
        {
            int childNode = child.first;
            int childCost = child.second;

            if (parCost + childCost < dist[childNode])
            {
                dist[childNode] = parCost + childCost; // path relax
                pq.push({childNode, dist[childNode]});
            }
        }
    }
}

int main()
{
    int n, e;
    cin >> n >> e;
    while (e--)
    {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }
    // memset
    for (int i = 0; i < n; i++)
    {
        dist[i] = INT_MAX;
    }
    dijkstra(0);
    for (int i = 0; i < n; i++)
    {
        cout << i << "-> " << dist[i] << endl;
    }
    return 0;
}
