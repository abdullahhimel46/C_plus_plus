// Floyd Warshall Algoritm
/*
Input:
4 6
3 2 8
2 1 5
1 0 2
3 0 20
0 1 3
1 2 2
Output:
Before:
0 3 INF INF
2 0 2 INF
INF 5 0 INF
20 INF 8 0

After:
0 3 5 INF
2 0 2 INF
7 5 0 INF
15 13 8 0
*/

#include <bits/stdc++.h>
using namespace std;
#define ll long long int
const int inf = INT_MAX;
int main()
{
    ll n, e;
    cin >> n >> e;
    ll adjMat[n][n];

    // memset
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            adjMat[i][j] = inf; // Initially

            if (i == j) // main diagonal
            {
                adjMat[i][j] = 0; // no self loops
            }
        }
    }

    while (e--)
    {
        int u, v, w;
        cin >> u >> v >> w;
        adjMat[u][v] = w;
    }

    cout << "Before:" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (adjMat[i][j] == inf)
                cout << "INF" << " ";
            else
                cout << adjMat[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

    // Floyd Warshall Algoritm
    for (int k = 0; k < n; k++)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                // i->k + k->j < i->j
                if (adjMat[i][k] + adjMat[k][j] < adjMat[i][j])
                {
                    // update i->j, path relax!
                    adjMat[i][j] = adjMat[i][k] + adjMat[k][j];
                }
            }
        }
    }

    cout << "After:" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (adjMat[i][j] == inf)
                cout << "INF" << " ";
            else
                cout << adjMat[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
