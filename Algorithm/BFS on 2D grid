// BFS on 2D grid
// find the minimum distance from a given source cell to a destination cell
/*
Input:
3 4
....
....
....
0 0 ->src
Output:
Min distance(2,3): 5
*/
/*
Tasks:
Read the dimensions of the grid (n rows and m columns) and the grid itself.
Read the starting position (si, sj) for the BFS traversal.
Initialize arrays vis (to keep track of visited cells), dis (to store the minimum distance from the source), and set initial values.
Call the bfs function, which performs BFS starting from the source cell (si, sj).
Output the minimum distance from the source cell to the destination cell (2, 3).
*/
#include <bits/stdc++.h>
using namespace std;

int n, m;
char a[20][20];
bool vis[20][20];
int dis[20][20];
vector<pair<int, int>> dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};

bool isValid(int i, int j)
{
    return i >= 0 && i < n && j >= 0 && j < m;
}

void bfs(int si, int sj)
{
    queue<pair<int, int>> q;
    q.push({si, sj});
    vis[si][sj] = true;
    dis[si][sj] = 0;

    while (!q.empty())
    {
        {
            pair<int, int> par = q.front();
            q.pop();
            int x = par.first, y = par.second;

            for (pair<int, int> d : dir)
            {
                int childi = par.first + d.first;
                int childj = par.second + d.second;

                if (isValid(childi, childj) && !vis[childi][childj])
                {
                    q.push({childi, childj});
                    vis[childi][childj] = true;
                    dis[childi][childj] = dis[x][y] + 1;
                }
            }
        }
    }
}
int main()
{
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> a[i][j];
        }
    }
    int srci, srcj;
    cin >> srci >> srcj;
    memset(vis, false, sizeof(vis));
    memset(dis, -1, sizeof(dis));
    bfs(srci, srcj);
    cout << "Min distance(2,3): " << dis[2][3];
    return 0;
}
