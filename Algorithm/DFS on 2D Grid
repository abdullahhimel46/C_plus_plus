
// DFS on 2D Grid
/*
Input:
3 4
....
....
....
1 1
Output:
1 1
1 2
1 3
0 3
0 2
0 1
0 0
1 0
2 0
2 1
2 2
2 3
*/
#include <bits/stdc++.h>
using namespace std;
#define N 50
int n, m;
char a[N][N];
bool vis[N][N];
// Store all four possible directions (right, left, up, down)
vector<pair<int, int>> dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};

// Check if the given cell coordinates (i, j) are within the grid boundaries
bool isValid(int i, int j)
{
    return i >= 0 && i < n && j >= 0 && j < m;
}

// DFS function to explore the grid
void dfs(int si, int sj)
{
    // traversing parent nodes
    cout << si << " " << sj << endl; // Print the current cell coordinates
    vis[si][sj] = true;              // Mark the current cell as visited

    // traversing child nodes
    for (pair<int, int> d : dir)
    {
        // move to next nodes
        int childi = si + d.first;  // New row coordinate
        int childj = sj + d.second; // New column coordinate

        // Check if the new cell is within the grid(valid) and has not been visited
        if (isValid(childi, childj) && !vis[childi][childj])
        {
            // Recursive call to DFS for the unvisited neighboring cell
            dfs(childi, childj);
        }
    }
}

int main()
{
    cin >> n >> m; // Input the dimensions of the grid
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> a[i][j]; // Input the grid values
        }
    }

    int srci, srcj; // Starting cell coordinates
    cin >> srci >> srcj;
    memset(vis, false, sizeof(vis)); // Initialize the visited array to false
    dfs(srci, srcj);                 // Start DFS from the specified cell
    return 0;
}
