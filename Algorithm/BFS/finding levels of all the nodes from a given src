// finding levels of all the nodes from a given src
/*
Data Structures:
The algorithm utilizes a queue data structure to keep track of nodes to be visited next.
An array adjList[] of vectors is used to represent the adjacency list of the graph.
vis[] array is used to mark visited nodes.
level[] array is used to store the level of each node from the source node.

Algorithm Steps:
Start with a source node src.
Enqueue the source node into the queue and mark it as visited.
While the queue is not empty:
Dequeue a node p from the front of the queue.
Print or process the node p.
Enqueue all unvisited adjacent nodes of p into the queue, mark them as visited, and set their level as level[p] + 1.
Repeat until the queue is empty
*/
/*
Input:
5 6
0 1
1 2
0 4
1 3
2 0
3 4
0 ->src
Level:
0: 0
1: 1
2: 1
3: 2
4: 1
*/
#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;
vector<int> adjList[N];     // Adjacency list representation of the graph
vector<bool> vis(N, false); // Array to mark visited nodes during BFS
vector<int> level(N, -1);   // Array to store the level of each node in the BFS tree

// Function to perform BFS on the graph starting from a given source node
void bfs(int src)
{
    queue<int> q;    // Queue to store nodes during BFS traversal
    q.push(src);     // Push the source node into the queue
    vis[src] = true; // Mark the source node as visited
    level[src] = 0;  // Set the level of the source node to 0

    while (!q.empty())
    {
        int curNode = q.front(); // Get the front node from the queue
        q.pop();                 // Pop the front node from the queue
        cout << curNode << " ";  // Output the current node

        // Explore neighbors of the current node
        for (int child : adjList[curNode])
        {
            if (!vis[child])
            // If the neighbor hasn't been visited
            {
                q.push(child);                     // Push the neighbor into the queue
                vis[child] = true;                 // Mark the neighbor as visited
                level[child] = level[curNode] + 1; // Set the level of the neighbor
            }
        }
    }
    cout << endl;
}

int main()
{
    int n, e;
    cin >> n >> e;

    // Input the edges of the graph
    while (e--)
    {
        int x, y;
        cin >> x >> y;
        //(for undirected graph)
        adjList[x].push_back(y); // Add y to the adjacency list of x
        adjList[y].push_back(x); // Add x to the adjacency list of y
    }

    int src;
    cin >> src; // Input the source node for BFS
    // memset(vis, false, sizeof(vis));  // Initialize the visited array
    // memset(level, -1, sizeof(level)); // Initialize the level array
    bfs(src); // Call the BFS function

    cout << "Level: " << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << ": " << level[i] << endl;
    }

    return 0;
}
