//** BISMILLAHIR ROHMANIR ROHIM **
// find the specific level of a node(des) from the src using pair
/*
Problem statement
You are given an undirected graph represented by n nodes and e edges. Your task is to determine the shortest distance 
(measured in levels) from a given source node (src) to a specific destination node (des). If there is no valid path 
between the source and the destination, return -1.
*/
#include <bits/stdc++.h>
using namespace std;

const char nl = '\n';
typedef vector<int> vi;
typedef pair<int, int> pii;
#define elif else if
#define all(x) x.begin(), x.end()
#define ll long long int // int=10e8,ll=10e18
#define py cout << "YES" << endl
#define pn cout << "NO" << endl
#define forn(i, n) for (int i = 0; i < n; i++)
#define forj(j, n) for (int j = 0; j < n; j++)

const int N = 1000;
vi adjList[N];
vi vis(N, false);

void solve(int s, int des)
{
    queue<pair<int, int>> q;
    q.push({s, 0});
    vis[s] = true;

    bool flag = false;

    while (!q.empty())
    {
        pii curNode = q.front();
        int node = curNode.first;
        int level = curNode.second;
        q.pop();

        for (int child : adjList[node])
        {
            if (!vis[child])
            {
                q.push({child, level + 1});
                vis[child] = true;
            }
        }

        if (node == des)
        {
            cout << "The level of " << des << " is: " << level << nl;
            flag = true;
        }
    }
    if (!flag)
        cout << -1 << nl;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, e;
    cin >> n >> e;
    while (e--)
    {
        int a, b;
        cin >> a >> b;
        adjList[a].push_back(b);
        adjList[b].push_back(a);
    }
    int src, des;
    cin >> src >> des;
    solve(src, des);
    return 0;
}

/*
input:
10 10
0 2
0 1
0 4
4 3
1 3
1 5
3 6
2 1
7 8
8 9
0
6
Output:
3
*/
