//** BISMILLAHIR ROHMANIR ROHIM **
// Adjacency List to Matrix in weighted&directed graph
/*
Input:
4 5
1 0 5
0 2 6
3 0 8
2 3 7
3 2 7
Output
0 -1 6 -1
5 0 -1 -1
-1 -1 0 7
8 -1 7 0

*/
#include <bits/stdc++.h>
using namespace std;

const char nl = '\n';
typedef vector<int> vi;
typedef pair<int, int> pii;
#define elif else if
#define all(x) x.begin(), x.end()
#define ll long long int // int=10e8,ll=10e18
#define py cout << "YES" << endl
#define pn cout << "NO" << endl
#define forn(i, n) for (int i = 0; i < n; i++)
#define forj(j, n) for (int j = 0; j < n; j++)

void convert(int n, vector<pii> adj[])
{
    int mat[n][n];
    forn(i, n)
    {
        forj(j, n)
        {
            mat[i][j] = -1;
            // diagonal element
            if (i == j)
                mat[i][j] = 0; // in self node, no cost needed
        }
    }

    forn(i, n)
    {
        for (pii child : adj[i])
        {
            int node = child.first;
            int cost = child.second;
            mat[i][node] = cost;
        }
    }

    forn(i, n)
    {
        forn(j, n)
        {
            cout << mat[i][j] << " ";
        }
        cout << nl;
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, e;
    cin >> n >> e;
    vector<pii> adj[n];
    while (e--)
    {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
    }

    convert(n, adj);
    return 0;
}
