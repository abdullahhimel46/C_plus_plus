//** BISMILLAHIR ROHMANIR ROHIM **
#include <bits/stdc++.h>
using namespace std;

const char nl = '\n';
typedef vector<int> vi;
typedef pair<int, int> pii;
#define elif else if
#define all(x) x.begin(), x.end()
#define ll long long int // int=10e8,ll=10e18
#define py cout << "YES" << endl
#define pn cout << "NO" << endl
#define forn(i, n) for (int i = 0; i < n; i++)
#define forj(j, n) for (int j = 0; j < n; j++)

vector<vector<int>> dp;
int knapsak(int n, int w, vi weights, vi values)
{
    // no item or weight is left
    if (n == 0 || w == 0)
        return 0;

    // return the precalculated value
    if (dp[n][w] != -1)
        return dp[n][w];

    if (weights[n] <= w) // bag e jaiga ase
    {
        int take = knapsak(n - 1, w - weights[n], weights, values) + values[n];
        // values[n] -> value of the taken(n'th) element
        int notTake = knapsak(n - 1, w, weights, values);
        // n-1 => move back to the previous element
        return dp[n][w] = max(take, notTake);
    }
    else
    {
        // weights[n] > w: skip it
        int notTake = knapsak(n - 1, w, weights, values);
        return dp[n][w] = notTake;
    }

    /*
    Visualization:
    n=4:
    index ->   0  1  2  3
    weights = {0, 3, 4, 5} (1-based indexing)
     values = {0,30,50,60} (1-based indexing)
    w = 8

    Step 1: knapsak(3, 8)
    Look at the 3rd item (weight = 5, value = 60).
    Two options:
        Include it: knapsak(3, 3) + 60
        (Reduce the capacity to 8-5=3, and consider the first 2 items.)
        Exclude it: knapsak(3, 8)
        (Keep the full capacity and consider the first 2 items.)
    Step 2: knapsak(2, 3)
    Look at the 2nd item (weight = 4, value = 50).
    Two options:
        Include it: Not possible because weight[2] > 3.
        Exclude it: knapsak(2, 3)
    */
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, w;
    cin >> n >> w;

    // 1-based indexing
    vi weights(n + 1);
    vi values(n + 1);
    dp.resize(n + 1, vector<int>(w + 1, -1));

    for (int i = 1; i <= n; i++)
        cin >> weights[i] >> values[i];
    /*
    Visualization of this loop:
    Initial state: n=4
    weights = {0, 0, 0, 0}
    values  = {0, 0, 0, 0}

    After Iteration 1 (i = 1):
    weights = {0, 3, 0, 0}
    values  = {0, 30, 0, 0}

    After Iteration 2 (i = 2):
    weights = {0, 3, 4, 0}
    values  = {0, 30, 50, 0}

    After Iteration 3 (i = 3):
    weights = {0, 3, 4, 5}
    values  = {0, 30, 50, 60}
    (0th index is unused since we're using 1-based indexing.)

    */

    int res = knapsak(n, w, weights, values);
    cout << res << nl;
    return 0;
}
