//** BISMILLAHIR ROHMANIR ROHIM **
// Equal Sum Partition using Subset Sum(top-down)
/*
Input
3
1 2 5
Output: NO
Explanation: The array cannot be partitioned into equal sum subsets.

Input
4
1 2 4 6
Output: NO
Explanation: The array cannot be partitioned into equal sum subsets.

Input
4
1 5 11 5
Output: YES
Explanation: The array can be partitioned as [1, 5, 5] and [11].
*/
#include <bits/stdc++.h>
using namespace std;

const char nl = '\n';
typedef vector<int> vi;
typedef pair<int, int> pii;
#define elif else if
#define all(x) x.begin(), x.end()
#define ll long long int                 // int=10e8, ll=10e18
#define py cout << "YES" << endl         // Macro to print "YES"
#define pn cout << "NO" << endl          // Macro to print "NO"
#define fori for (int i = 0; i < n; i++) // Macro for loop from 0 to n-1
#define forj for (int j = 0; j < n; j++) // Macro for nested loop

// Declaring a global 2D vector for memoization
vector<vector<int>> dp;

// Recursive function to solve the subset sum problem
bool subSet(vector<int> &mSet, int n, int s)
{
    // Base case
    if (n == 0) // no elements left
    {
        // the target sum becomes 0, we found a subset, return true
        if (s == 0)
            return 1;
        else
            return 0;
    }

    // Check if the result is already calculated (memoized)
    if (dp[n][s] != -1)
        return dp[n][s];

    // current element is larger than the remaining sum, exclude it and immediately return that result
    if (mSet[n - 1] > s) // mSet[n - 1] = 5 > 4
    {
        bool exclude = subSet(mSet, n - 1, s); // Exclude the current element
        return dp[n][s] = exclude;             // early termination
    }

    // Recursive case: Try both including and excluding the current element
    bool include = subSet(mSet, n - 1, s - mSet[n - 1]); // Include the current element
    bool exclude = subSet(mSet, n - 1, s);               // Exclude the current element

    // Store the result in the memoization table and return it
    return dp[n][s] = include || exclude;
}

int main()
{
    ios::sync_with_stdio(false); // Speeds up input/output
    cin.tie(0);                  // Unties cin from cout for faster I/O

    int n; // Number of elements in the set
    cin >> n;

    vi mSet(n); // Vector to store the set elements
    fori
    {
        cin >> mSet[i]; // Input each element into the vector
    }

    int sum = 0;
    for (int x : mSet)
        sum += x;

    // early termination
    if (sum % 2 != 0) // sum can't be devided into two parts
    {
        pn;
        return 0;
    }

    int tar = sum / 2;
    // Resize and initialize the dp table with -1 (unvisited state)
    dp.resize(n + 1, vector<int>(tar + 1, -1));

    if (subSet(mSet, n, tar))
        py;
    else
        pn;

    return 0;
}
