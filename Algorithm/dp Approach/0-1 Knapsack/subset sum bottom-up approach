//** BISMILLAHIR ROHMANIR ROHIM **
// subset sum bottom-up approach
/*
Input
4
1 2 4 6
6
Output
YES
*/

#include <bits/stdc++.h>
using namespace std;

const char nl = '\n';
typedef vector<int> vi;
#define py cout << "YES" << endl
#define pn cout << "NO" << endl
#define fori for (int i = 0; i < n; i++)
#define forj for (int j = 0; j < n; j++)

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    vi mSet(n);
    fori
    {
        cin >> mSet[i];
    }
    int s;
    cin >> s;
    int dp[n + 1][s + 1];

    for (int i = 0; i < n + 1; i++)
        dp[i][0] = true; // set 1st col to T

    for (int j = 1; j < s + 1; j++)
        dp[0][j] = false; // set 1st row to F

    for (int i = 1; i < n + 1; i++)
    {
        // i -> index/element no
        for (int j = 1; j < s + 1; j++)
        {
            // j -> sum
            dp[i][j] = dp[i - 1][j - mSet[i]] || dp[i - 1][j];
            /// explanation: 
            // bool include = dp[i - 1][j - mSet[i - 1]];
            // bool exclude = dp[i - 1][j];
            // dp[i][j] = include || exclude;
        }
    }

    /// final dp table
    // for (int i = 0; i <= n; i++)
    // {
    //     for (int j = 0; j <= s; j++)
    //     {
    //         if (dp[i][j])
    //             cout << "T";
    //         else
    //             cout << "F";
    //     }
    //     cout << nl;
    // }

    // result will be in the last cell of the dp table
    if (dp[n][s])
        py;
    else
        pn;

    return 0;
}
