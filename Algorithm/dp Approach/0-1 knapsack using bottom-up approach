//** BISMILLAHIR ROHMANIR ROHIM **
// 0-1 knapsack using bottom-up approach

#include <bits/stdc++.h>
using namespace std;

const char nl = '\n';
typedef vector<int> vi;
typedef pair<int, int> pii;
#define elif else if
#define all(x) x.begin(), x.end()
#define ll long long int // int=10e8,ll=10e18
#define py cout << "YES" << endl
#define pn cout << "NO" << endl
#define forn(i, n) for (int i = 0; i < n; i++)
#define forj(j, n) for (int j = 0; j < n; j++)

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, w;
    cin >> n >> w;
    vi weights(n + 1);
    vi values(n + 1);
    vector<vector<int>> dp;
    dp.resize(n + 1, vector<int>(w + 1, -1));

    for (int i = 1; i <= n; i++)
        cin >> weights[i] >> values[i];

    // set 1st row & col to 0
    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= w; j++)
            // base case
            if (i == 0 || j == 0)
                // no items left(n = 0) || no weights to carry(w=0)
                dp[i][j] = 0;
    }

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= w; j++)
        {
            if (weights[i] <= j)
            {
                int take = dp[i - 1][j - weights[i]] + values[i];
                int notTake = dp[i - 1][j];
                dp[i][j] = max(take, notTake);
            }
            else
            {
                int notTake = dp[i - 1][j];
                dp[i][j] = notTake;
            }
        }
    }

    cout << dp[n][w] << nl;

    return 0;
}
