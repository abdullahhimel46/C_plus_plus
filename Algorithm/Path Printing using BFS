// Path Printing using BFS
/*
Input:
6 7
0 1
1 2
1 3
2 4
2 5
4 5
4 3
0 ->src
5 ->des

Output: 0 1 2 5
*/
#include <bits/stdc++.h>
using namespace std;

const int m = 1e5 + 10;
vector<int> v[m]; // Adjacency list to represent the graph
vector<bool> vis(m, false);
// memset(vis, false, sizeof(vis));
vector<int> parent(m, -1);
// memset(parent, -1, sizeof(parent));

// Breadth-First Search algorithm
void bfs(int src)
{
    queue<int> q;
    q.push(src);
    vis[src] = true;

    while (!q.empty())
    {
        int p = q.front();
        q.pop();
        for (int child : v[p])
        {
            if (!vis[child])
            {
                q.push(child);
                vis[child] = true;
                parent[child] = p; // Set the parent of 'child' as 'p'
            }
        }
    }
}

int main()
{
    int n, e;
    cin >> n >> e;

    // Input the edges of the graph
    while (e--)
    {
        int a, b;
        cin >> a >> b;
        // Connect edges by adding them to the adjacency list
        v[a].push_back(b);
        v[b].push_back(a);
    }

    int src, des;
    cin >> src >> des;

    // Perform BFS traversal starting from the source node
    bfs(src);

    int x = des;
    vector<int> path;

    // Reconstruct the path from destination to source using parent information
    // backtracking
    while (x != -1)
    {
        path.push_back(x);
        // ask x, which is it's parent
        x = parent[x];
    }

    // Reverse the path to get it from source to destination
    reverse(path.begin(), path.end());

    // Output the path
    for (int val : path)
    {
        cout << val << " ";
    }

    return 0;
}
