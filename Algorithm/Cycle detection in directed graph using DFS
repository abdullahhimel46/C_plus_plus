// Cycle detection in directed graph
/*
Input:
5 5
0 1
1 2
0 4
4 3
3 0
Output:Cycle detected

Input:
7 7
5 6
4 5
0 4
0 6
1 0
1 2
2 3
Output:No cycle detected
*/

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
vector<int> adj[N];
bool vis[N];
bool pathVis[N];
bool ans;

void dfs(int parent)
{
    vis[parent] = true;
    pathVis[parent] = true;

    for (int child : adj[parent])
    {

        if (!vis[child])
        {
            dfs(child);
        }

        if (pathVis[child])
        {
            ans = true;
        }
    }
    // kaj ses
     pathVis[parent] = false;
}

int main()
{
    int n, e;
    cin >> n >> e;
    while (e--)
    {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
    }
    memset(vis, false, sizeof(vis));
    memset(pathVis, false, sizeof(pathVis));
    ans = false;

    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
        {
            dfs(i);
        }
    }

    if (ans)
        cout << "Cycle detected" << endl;
    else
        cout << "No cycle detected" << endl;
    return 0;
}
