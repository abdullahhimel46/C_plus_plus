// Detect Cycle in Undirected Graph using BFS
/*
Input:
4 4
0 1
1 2
2 3
3 1
Output:
Cycle found
*/
#include <bits/stdc++.h>
using namespace std;
const int M = 1e5 + 5;
vector<int> adj[M];
bool vis[M];
int directParent[M];
bool ans;

void bfs(int src)
{
    queue<int> q;
    q.push(src);
    vis[src] = true;

    while (!q.empty())
    {
        int parent = q.front();
        q.pop();

        for (int child : adj[parent])
        {
            if (vis[child] && directParent[parent] != child)
            // Check if the child node is already visited
            // and if it's not a direct parent of the current parent node
            {
                ans = true; // cycle detected
            }

            if (!vis[child])
            {
                vis[child] = true;
                directParent[child] = parent;
                q.push(child);
            }
        }
    }
}

int main()
{
    int n, e;
    cin >> n >> e;
    while (e--)
    {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    memset(vis, false, sizeof(vis));
    memset(directParent, -1, sizeof(directParent));
    ans = false; // No cycle detected

    // visting all the components
    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
        {
            bfs(i);
        }
    }

    if (ans)
        cout << "Cycle found" << endl;
    else
        cout << "No cycle found" << endl;
    return 0;
}
