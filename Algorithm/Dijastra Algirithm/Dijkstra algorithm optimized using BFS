// Dijkstra algorithm optimized using BFS
/*
Input:
5 8
0 1 10
0 2 7
0 3 4
1 4 3
2 4 5
2 1 1
3 4 5
3 2 1
Output:
0 -> 0
1 -> 6
2 -> 5
3 -> 4
4 -> 9
*/
#include <bits/stdc++.h>
using namespace std;
const int N = 100;
vector<pair<int, int>> adj[N];
int dist[N];

/*
class cmp
{
public:
    bool operator()(pair<int, int> a, pair<int, int> b)
    {
        return a.second > b.second; // sort on the basis of second value
    }
};
*/

void dijastra(int src)
{
    // priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({src, 0});
    // push -> srcNode and cost of the srcNode
    dist[src] = 0;

    while (!pq.empty())
    {
        pair<int, int> curNode = pq.top();
        pq.pop();
        int curNodeVal = curNode.first;   // vertex
        int curNodeCost = curNode.second; // cost

        for (pair<int, int> newNode : adj[curNodeVal])
        {
            int newNodeVal = newNode.first;   //`vertex`
            int newNodeCost = newNode.second; // cost

            // path relaxation
            if (curNodeCost + newNodeCost < dist[newNodeVal])
            // if( 0 + 10 < INT_MAX )
            /* dist[newNodeVal]: This represents the current shortest distance known
            from the source vertex to newNodeVal. Initially, all distances are set to
            infinity (INT_MAX).
             */
            {
                dist[newNodeVal] = curNodeCost + newNodeCost;
                pq.push({newNodeVal, dist[newNodeVal]});
                // push -> newNodeVal and new shortest distace
            }
        }
    }
}

int main()
{
    int n, e;
    cin >> n >> e;
    while (e--)
    {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }
    // memset
    for (int i = 0; i < n; i++)
    {
        dist[i] = INT_MAX;
    }
    dijastra(0);
    for (int i = 0; i < n; i++)
    {
        cout << i << " -> " << dist[i] << endl;
    }
    return 0;
}
