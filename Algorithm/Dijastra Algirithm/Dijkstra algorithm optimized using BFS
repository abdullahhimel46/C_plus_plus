// Dijkstra algorithm optimized using BFS
/*
Input:
5 8
0 1 10
0 2 7
0 3 4
1 4 3
2 4 5
2 1 1
3 4 5
3 2 1
Output:
0 -> 0
1 -> 6
2 -> 5
3 -> 4
4 -> 9
*/
#include <bits/stdc++.h>
using namespace std;

vector<vector<pair<int, int>>> adj;
vector<int> dist;

// funcTor (class with operator())
class cmp
{
public:
    bool operator()(pair<int, int> a, pair<int, int> b)
    {
        return a.second > b.second; // sort on the basis of second value
    }
};

void dijastra(int src)
{
    // priority_queue<Type, Container, Comparator>
    priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;
    pq.push({src, 0});
    dist[src] = 0;

    while (!pq.empty())
    {
        pair<int, int> parent = pq.top();
        pq.pop();
        int curNode = parent.first;   // vertex
        int curNodeCost = parent.second; // cost

        for (pair<int, int> child : adj[curNode])
        {
            int newNode = child.first;   //`vertex`
            int newNodeCost = child.second; // cost

            // path relaxation
            /*
            dist[newNode] -> updated distance of newNode(can accessed from the dist vector)
            Visualization:
                    curNodeCost=0                             dist[newNode]=INT_MAX
                            A-----------------------------------B
                                        newNodeCost=10
             */
            // if( 0 + 10 < INT_MAX )
            if (curNodeCost + newNodeCost < dist[newNode])
            {
                // update distance of newNode
                dist[newNode] = curNodeCost + newNodeCost;
                pq.push({newNode, dist[newNode]});
            }
        }
    }
}

int main()
{
    int n, e;
    cin >> n >> e;

    // resize & assign declared vectors with no of nodes(n), to avoid unnecessary memory allocation
    adj.resize(n + 1);
    // assign is used to initialize
    dist.assign(n, INT_MAX);

    while (e--)
    {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }

    dijastra(0);

    for (int i = 0; i < n; i++)
    {
        cout << i << " -> " << dist[i] << endl;
    }
    return 0;
}
