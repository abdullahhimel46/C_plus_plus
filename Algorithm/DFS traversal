// DFS traversal
/*
Input:
6 6
0 1
0 2
0 3
1 4
3 5
3 2
Output:
0 1 4 2 3 5
*/
#include <bits/stdc++.h>
using namespace std;

const int m = 1e5 + 10;
vector<int> v[m];
vector<bool> vis(m, false);

// Function to perform DFS starting from a given source node.
void dfs(int src)
{
    // Print the current node being visited.
    cout << src << " ";

    vis[src] = true; // Mark the current node as visited.

    // Iterate through all the adjacent nodes (children) of the current node.
    for (int child : v[src])
    {
        // Check if the child node has not been visited yet.
        if (!vis[child])
        {
            // If not visited, recursively call the DFS function for the child node.
            dfs(child);
        }
    }
}

int main()
{
    int n, e;
    cin >> n >> e;
    while (e--)
    {
        int a, b;
        cin >> a >> b;
        v[a].push_back(b);
        v[b].push_back(a);
    }

    dfs(0);
    return 0;
}
