//Number of Islands
//Link:https://leetcode.com/problems/number-of-islands/
class Solution {
public:
    int n,m;
    bool vis[305][305];
    vector<pair<int,int>> dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};

    bool isValid(int i,int j){
        return i>=0 && i<n && j>=0 && j<m;
    }
    void dfs(int si,int sj,vector<vector<char>>& grid)
    {
        vis[si][sj]=true;
        for(pair<int,int> child:dir){
            int ci=child.first+si;
            int cj=child.second+sj;
            if(isValid(ci,cj)){
                if(!vis[ci][cj] && grid[ci][cj]=='1'){
                    dfs(ci,cj,grid);
                }
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        m=grid[0].size();
        memset(vis,false,sizeof(vis));
        int no_of_island=0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    dfs(i,j,grid);
                    no_of_island++;
                    cout<<no_of_island<<endl;
                }
            }
        }
        return no_of_island;
    }
};
